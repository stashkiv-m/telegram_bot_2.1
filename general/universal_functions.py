import yfinance as yf
from telegram.ext import MessageHandler, Filters


from crypto.get_crypto_data import *
from developer_functions.general_dev.chart import generate_chart
from general.user_list import get_user_watchlist
from keyboards import get_watchlist_inline_keyboard
from language_state import language_state
from state_update_menu import menu_state
from stock.get_stock_data import get_stock_metrics


from language_state import language_state


def symbol_info(update, context):
    language = language_state().rstrip('\n')
    if language == "Ukrainian":
        prompt = "–í–≤–µ–¥—ñ—Ç—å —Ç—ñ–∫–µ—Ä, —è–∫–∏–π –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å:"
    else:
        prompt = "Enter the symbol you are interested in:"

    context.bot.send_message(chat_id=update.effective_chat.id, text=prompt)

    # –†–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏ –æ–±—Ä–æ–±–Ω–∏–∫ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –≤–≤–µ–¥–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    dp = context.dispatcher
    dp.add_handler(MessageHandler(Filters.text, handle_ticker_input))


def handle_ticker_input(update, context):
    state = menu_state().rstrip('\n')
    language = language_state().rstrip('\n')
    ticker = update.message.text.upper()
    try:
        # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –¥–∞–Ω—ñ –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Å—Ç–∞–Ω—É
        if state == 'stock_company_info':
            symbol = yf.Ticker(ticker)
            data = symbol.history(period="1y")
            # –û—Ç—Ä–∏–º—É—î–º–æ —Ç–∞–±–ª–∏—Ü—é –º–µ—Ç—Ä–∏–∫ –¥–ª—è –∞–∫—Ü—ñ—ó
            metrics_table = get_stock_metrics(symbol, ticker, language)

            # –ì–µ–Ω–µ—Ä—É—î–º–æ —Ç–µ–∫—Å—Ç–æ–≤–∏–π –∞–Ω–∞–ª—ñ–∑ —ñ —à–ª—è—Ö –¥–æ –≥—Ä–∞—Ñ—ñ–∫–∞
            # analysis = analyze_ticker(ticker=ticker, data=data, language=language, state=state)

            img_path = generate_chart(ticker)
            reply_markup = get_watchlist_inline_keyboard(ticker)

            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –≥—Ä–∞—Ñ—ñ–∫ —ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∞–Ω–∞–ª—ñ–∑—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
            context.bot.send_photo(
                chat_id=update.effective_chat.id,
                photo=open(img_path, 'rb'),

            )
            # –§–æ—Ä–º–∞—Ç—É—î–º–æ —Ç–µ–∫—Å—Ç –∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ –¥–ª—è –∫–æ–∂–Ω–æ—ó —Å–µ–∫—Ü—ñ—ó
            full_message = f"**Fundamental Metrics:**\n{metrics_table}\n"
            context.bot.send_message(
                chat_id=update.effective_chat.id,
                text=full_message,
                parse_mode='Markdown',
                reply_markup=reply_markup  # <- –æ—Å—å —Ç—É—Ç –±—É–¥—É—Ç—å –∫–Ω–æ–ø–∫–∏!
            )

            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
            # context.bot.send_message(chat_id=update.effective_chat.id, text=full_message, parse_mode='Markdown')

            # context.bot.send_message(chat_id=update.effective_chat.id, text=analysis)

        elif state == 'crypto_info':
            symbol = yf.Ticker(ticker + '-USD')
            data = symbol.history(period="1y")

            # –ì–µ–Ω–µ—Ä—É—î–º–æ —Ç–µ–∫—Å—Ç–æ–≤–∏–π –∞–Ω–∞–ª—ñ–∑ –¥–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∏
            # analysis = analyze_ticker(ticker=ticker, data=data, language=language, state=state)

            img_path = generate_chart(ticker + '-USD')

            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –≥—Ä–∞—Ñ—ñ–∫ —Ç–∞ –∞–Ω–∞–ª—ñ–∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
            context.bot.send_photo(chat_id=update.effective_chat.id, photo=open(img_path, 'rb'))

            # –û—Ç—Ä–∏–º—É—î–º–æ —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ç–∞–±–ª–∏—Ü—é –º–µ—Ç—Ä–∏–∫ –¥–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∏
            metrics_table = get_crypto_info_from_coinmarketcap(ticker, language)
            full_message = (
                f"**Fundamental Metrics:**\n{metrics_table}\n"
            )

            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
            context.bot.send_message(chat_id=update.effective_chat.id, text=full_message, parse_mode='Markdown')

        elif state == 'forex_pairs_info':
            symbol = yf.Ticker(ticker + '=X')
            data = symbol.history(period="1y")

            # –ì–µ–Ω–µ—Ä—É—î–º–æ —Ç–µ–∫—Å—Ç–æ–≤–∏–π –∞–Ω–∞–ª—ñ–∑ –¥–ª—è —Ñ–æ—Ä–µ–∫—Å–∞
            # analysis = analyze_ticker(ticker=ticker, data=data, language=language, state=state)
            analysis = 'Technical analysis is not yet available.'

            img_path = generate_chart(ticker + '=X')

            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –≥—Ä–∞—Ñ—ñ–∫ —Ç–∞ –∞–Ω–∞–ª—ñ–∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
            context.bot.send_photo(chat_id=update.effective_chat.id, photo=open(img_path, 'rb'))
            full_message = (
                f"**Technical Analysis:**\n{analysis}\n\n"

            )

            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
            context.bot.send_message(chat_id=update.effective_chat.id, text=full_message, parse_mode='Markdown')

    except Exception as e:
        # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –≤ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—ñ–¥ —Å—Ç–∞–Ω—É
        error_message = f"Error! Ticker '{ticker}' not found. Please check the input."
        if state == 'stock_company_info':
            error_message += " (Ex: AAPL)"
        elif state == 'crypto_info':
            error_message += " (Ex: BTC)"
        elif state == 'forex_pairs_info':
            error_message += " (Ex: EUR-USD)"

        context.bot.send_message(chat_id=update.effective_chat.id, text=error_message)


def show_watchlist_with_changes(update, context):
    user_id = update.effective_user.id
    tickers = get_user_watchlist(user_id)
    if not tickers:
        context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="–í–∞—à Watchlist –ø–æ—Ä–æ–∂–Ω—ñ–π."
        )
        return

    msg = "–í–∞—à Watchlist –∑–∞ 24 –≥–æ–¥–∏–Ω–∏:\n"
    for ticker in tickers:
        try:
            data = yf.Ticker(ticker).history(period="2d")
            if data.shape[0] < 2:
                change_str = "–Ω–µ–º–∞—î –¥–∞–Ω–∏—Ö"
                icon = "‚ùî"
            else:
                price_yesterday = data['Close'].iloc[-2]
                price_today = data['Close'].iloc[-1]
                change = ((price_today / price_yesterday) - 1) * 100
                sign = "+" if change > 0 else ""
                icon = "üìà" if change > 0 else ("üìâ" if change < 0 else "‚ûñ")
                change_str = f"{sign}{change:.2f}%"
            msg += f"{icon} {ticker} {change_str}\n"
        except Exception as e:
            msg += f"‚ùå {ticker} (error)\n"

    context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=msg
    )
