import pandas as pd


def format_number(value, is_currency=True):
    if value is None:
        return "N/A"
    elif abs(value) >= 1_000_000_000:
        return f"{value / 1_000_000_000:.2f}B" if not is_currency else f"${value / 1_000_000_000:.2f}B"
    elif abs(value) >= 1_000_000:
        return f"{value / 1_000_000:.2f}M" if not is_currency else f"${value / 1_000_000:.2f}M"
    else:
        return f"{value:,.2f}" if not is_currency else f"${value:,.2f}"


def explain_metric(name, lang='English'):
    explanations = {
        "P/E Ratio": {
            "en": "Price-to-Earnings: how much investors are willing to pay per dollar of earnings.",
            "ua": "–¶—ñ–Ω–∞/–ü—Ä–∏–±—É—Ç–æ–∫: —Å–∫—ñ–ª—å–∫–∏ —ñ–Ω–≤–µ—Å—Ç–æ—Ä–∏ –≥–æ—Ç–æ–≤—ñ –ø–ª–∞—Ç–∏—Ç–∏ –∑–∞ 1 –¥–æ–ª–∞—Ä –ø—Ä–∏–±—É—Ç–∫—É."
        },
        "Price to Book": {
            "en": "Price-to-Book: compares market price to book value.",
            "ua": "–¶—ñ–Ω–∞ –¥–æ –±–∞–ª–∞–Ω—Å–æ–≤–æ—ó –≤–∞—Ä—Ç–æ—Å—Ç—ñ: –ø–æ—Ä—ñ–≤–Ω—é—î —Ä–∏–Ω–∫–æ–≤—É —Ü—ñ–Ω—É –∑ –±–∞–ª–∞–Ω—Å–æ–≤–æ—é –≤–∞—Ä—Ç—ñ—Å—Ç—é –∫–æ–º–ø–∞–Ω—ñ—ó."
        },
        "Dividend Yield": {
            "en": "Shows annual dividend income as a percentage of stock price.",
            "ua": "–†—ñ—á–Ω–∏–π –¥–∏–≤—ñ–¥–µ–Ω–¥ —É –≤—ñ–¥—Å–æ—Ç–∫–∞—Ö –¥–æ —Ü—ñ–Ω–∏ –∞–∫—Ü—ñ—ó."
        },
        "ROE": {
            "en": "Return on Equity: how efficiently equity generates profit.",
            "ua": "–†–µ–Ω—Ç–∞–±–µ–ª—å–Ω—ñ—Å—Ç—å –∫–∞–ø—ñ—Ç–∞–ª—É: –µ—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≤–ª–∞—Å–Ω–æ–≥–æ –∫–∞–ø—ñ—Ç–∞–ª—É."
        },
        "Debt-to-Equity": {
            "en": "Shows leverage by comparing total debt to equity.",
            "ua": "–í—ñ–¥–Ω–æ—à–µ–Ω–Ω—è –±–æ—Ä–≥—É –¥–æ –∫–∞–ø—ñ—Ç–∞–ª—É: –ø–æ–∫–∞–∑—É—î —Ä—ñ–≤–µ–Ω—å –∑–∞–±–æ—Ä–≥–æ–≤–∞–Ω–æ—Å—Ç—ñ –∫–æ–º–ø–∞–Ω—ñ—ó."
        },
        "Profit Margin": {
            "en": "Net income as a percentage of revenue.",
            "ua": "–ß–∏—Å—Ç–∏–π –ø—Ä–∏–±—É—Ç–æ–∫ —è–∫ –≤—ñ–¥—Å–æ—Ç–æ–∫ –≤—ñ–¥ –¥–æ—Ö–æ–¥—É."
        }
    }
    return explanations.get(name, {}).get('ua' if lang == 'Ukrainian' else 'en', "No description")

def analyze_metric(name, value):
    if value is None:
        return "N/A", "–ù/–î"
    analysis_en, analysis_ua = "", ""
    if name == "P/E Ratio":
        if value < 10: analysis_en, analysis_ua = "Undervalued", "–ù–µ–¥–æ–æ—Ü—ñ–Ω–µ–Ω–∞"
        elif value > 30: analysis_en, analysis_ua = "Overvalued", "–ü–µ—Ä–µ–æ—Ü—ñ–Ω–µ–Ω–∞"
        else: analysis_en, analysis_ua = "Fairly valued", "–°–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ –æ—Ü—ñ–Ω–µ–Ω–∞"
    elif name == "ROE":
        if value > 20: analysis_en, analysis_ua = "High profitability", "–í–∏—Å–æ–∫–∞ –ø—Ä–∏–±—É—Ç–∫–æ–≤—ñ—Å—Ç—å"
        elif value > 10: analysis_en, analysis_ua = "Moderate profitability", "–°–µ—Ä–µ–¥–Ω—è –ø—Ä–∏–±—É—Ç–∫–æ–≤—ñ—Å—Ç—å"
        else: analysis_en, analysis_ua = "Low profitability", "–ù–∏–∑—å–∫–∞ –ø—Ä–∏–±—É—Ç–∫–æ–≤—ñ—Å—Ç—å"
    elif name == "Debt-to-Equity":
        if value < 1: analysis_en, analysis_ua = "Low debt", "–ù–∏–∑—å–∫–∏–π –±–æ—Ä–≥"
        elif value < 2: analysis_en, analysis_ua = "Moderate debt", "–°–µ—Ä–µ–¥–Ω—ñ–π –±–æ—Ä–≥"
        else: analysis_en, analysis_ua = "High debt", "–í–∏—Å–æ–∫–∏–π –±–æ—Ä–≥"
    elif name == "Dividend Yield":
        if value > 5: analysis_en, analysis_ua = "High dividend", "–í–∏—Å–æ–∫—ñ –¥–∏–≤—ñ–¥–µ–Ω–¥–∏"
        elif value > 2: analysis_en, analysis_ua = "Moderate dividend", "–°–µ—Ä–µ–¥–Ω—ñ –¥–∏–≤—ñ–¥–µ–Ω–¥–∏"
        else: analysis_en, analysis_ua = "Low dividend", "–ù–∏–∑—å–∫—ñ –¥–∏–≤—ñ–¥–µ–Ω–¥–∏"
    elif name == "Price to Book":
        if value < 1: analysis_en, analysis_ua = "Undervalued", "–ù–µ–¥–æ–æ—Ü—ñ–Ω–µ–Ω–∞"
        elif value > 3: analysis_en, analysis_ua = "Overvalued", "–ü–µ—Ä–µ–æ—Ü—ñ–Ω–µ–Ω–∞"
        else: analysis_en, analysis_ua = "Fair value", "–°–ø—Ä–∞–≤–µ–¥–ª–∏–≤–∞ —Ü—ñ–Ω–∞"
    elif name == "Profit Margin":
        if value > 20: analysis_en, analysis_ua = "Strong margin", "–í–∏—Å–æ–∫–∞ –º–∞—Ä–∂–∞"
        elif value > 10: analysis_en, analysis_ua = "Moderate margin", "–°–µ—Ä–µ–¥–Ω—è –º–∞—Ä–∂–∞"
        else: analysis_en, analysis_ua = "Low margin", "–ù–∏–∑—å–∫–∞ –º–∞—Ä–∂–∞"
    else:
        analysis_en, analysis_ua = "No analysis", "–ë–µ–∑ –∞–Ω–∞–ª—ñ–∑—É"
    return analysis_en, analysis_ua

def get_stock_metrics(stock, ticker, language='English'):
    info = stock.info
    balance_sheet = stock.quarterly_balance_sheet
    income = stock.quarterly_financials

    def safe_get(func):
        try: return func()
        except: return None

    roe = safe_get(lambda: round((income.loc["Net Income"].iloc[0] / balance_sheet.loc["Stockholders Equity"].iloc[0]) * 100, 2))
    pe_ratio = safe_get(lambda: round(info.get("trailingPE", 0), 2))
    price_to_book = safe_get(lambda: round(info.get("priceToBook", 0), 2))
    dividend_yield = safe_get(lambda: round(info.get("dividendYield", 0) * 100, 2))
    debt_to_equity = safe_get(lambda: round(
        (balance_sheet.loc["Long Term Debt"].iloc[0] + balance_sheet.loc["Current Debt"].iloc[0]) /
        balance_sheet.loc["Stockholders Equity"].iloc[0], 2
    ))
    profit_margin = safe_get(lambda: round(
        (income.loc["Net Income"].iloc[0] / income.loc["Total Revenue"].iloc[0]) * 100, 2
    ))

    metrics = {
        "P/E Ratio": pe_ratio,
        "Price to Book": price_to_book,
        "Dividend Yield": dividend_yield,
        "ROE": roe,
        "Debt-to-Equity": debt_to_equity,
        "Profit Margin": profit_margin
    }

    report = f"üìä **{info.get('longName', ticker)}**\n"
    report += f"{'üìÅ Sector:' if language == 'English' else 'üìÅ –°–µ–∫—Ç–æ—Ä:'} {info.get('sector', 'N/A')}\n"
    report += f"{'üè≠ Industry:' if language == 'English' else 'üè≠ –Ü–Ω–¥—É—Å—Ç—Ä—ñ—è:'} {info.get('industry', 'N/A')}\n\n"
    report += f"{'üìà Metrics and Analysis:' if language == 'English' else 'üìà –ü–æ–∫–∞–∑–Ω–∏–∫–∏ —Ç–∞ –ê–Ω–∞–ª—ñ–∑:'}\n"

    for name, value in metrics.items():
        desc = explain_metric(name, language)
        analysis_en, analysis_ua = analyze_metric(name, value)
        value_str = f"{value:.2f}" if isinstance(value, float) else "N/A"
        analysis = analysis_ua if language == 'Ukrainian' else analysis_en
        report += f"\nüîπ *{name}*: {value_str}\n"
        report += f"    - {desc}\n"
        report += f"    - {analysis}\n"

    return report
